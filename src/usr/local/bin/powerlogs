#!/bin/sh
### BEGIN INIT INFO
# Provides:  powerlogs.service
# Required-Start:  $local_fs $network
# Required-Stop:  $local_fs $network
# Default-Start:  2 3 4 5
# Default-Stop:  $none
# Short-Description: Monitors the duration of the powered-down state of the system
### END INIT INFO

stamp_path=/var/log/powerlogs.sta
log_path=/var/log/powerlogs.log

log_exit() {
  timestamp=$(get_timestamp)
  echo "$timestamp | $1" >> $log_path
  echo "$timestamp | $1"
  exit
}

# Partially modified from some stackoverflow post. I forgor which so can't link :c
if [ -n "$SYSTEMD_START" ]; then
  process_lockfile=/var/lock/powerlogs.lock
  umask 000                  # allow all users to access the file we're about to create
  exec 9> $process_lockfile  # open lockfile on FD 9, based on basename of argv[0]
  umask 022                  # move back to more restrictive file permissions
  flock -x -n 9 || log_exit "Failed to acquire lockfile"      # grab that lock, or exit the script early
  echo "Enforcing process singleton '$process_lockfile'"
fi

# We force a resync on the timedatectl in-case the sync-service is disabled
timedatectl --adjust-system-clock

get_timestamp() {
  date "+%d %b %Y %I:%M %p"
}

# $1 - seconds
format_seconds() {
  if [ $1 -eq 1 ]; then
    echo "1 second"
  else 
    echo "$1 seconds"
  fi
}

# $1 - minutes
format_minutes() {
  if [ $1 -eq 1 ]; then
    echo "1 minute"
  else
    echo "$1 minutes"
  fi
}

# If there's a timestamp, we check how long it was offline.
if [ -f $stamp_path ]; then
  file_date=$(stat --format=%Y $stamp_path) #   %Y   time of last data modification, seconds since Epoch
  current_date=$(date +%s) #   %s   seconds since the Epoch (1970-01-01 00:00 UTC)

  formatted_file_date=$(date -d @$file_date "+%d %b %I:%M %p")

  offline_seconds=$(expr $current_date - $file_date)
  timestamp=$(get_timestamp)

  # Check if its offline for less than 60 seconds
  if [ "$offline_seconds" -lt 60 ]; then
    message="Device was off for $(format_seconds $offline_seconds)."
  else
    minutes_offline=$(expr $offline_seconds / 60)
    message="Device was off since [ $formatted_file_date ] for $(format_minutes $minutes_offline)."
  fi

    echo "$timestamp | $message" >> $log_path
    echo "$message"
fi

# We run the loop here that updates the timestamp
if [ -n "$SYSTEMD_START" ]; then
  echo "Running service loop"
  while true; do
    (
      flock -x 9
      touch $stamp_path
    )
    sleep 1
  done
fi
